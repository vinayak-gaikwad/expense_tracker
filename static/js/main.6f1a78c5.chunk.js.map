{"version":3,"sources":["Balance.js","History.js","HistoryList.js","Transaction.js","App.js","serviceWorker.js","index.js"],"names":["Balance","total","income","expense","className","History","id","text","amount","removeHistory","dclass","date","key","title","onClick","HistoryList","transaction","map","data","Transaction","onSubmit","onAmountChange","onTextChange","onChange","placeholder","type","App","setState","target","value","generateID","Math","floor","random","state","alert","historyItem","filter","li","calculate","amounts","reduce","acc","am","parseInt","item","localStorage","getItem","this","JSON","parse","nextProps","nextState","setItem","stringify","today","Date","getFullYear","getMonth","getDate","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f1a78c5.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Balance.css'\r\n\r\nfunction Balance({ total, income, expense }) {\r\n    return (\r\n        <div className='balance'>\r\n            <div className='ele'>\r\n                <h3>Balance</h3>\r\n            <h2>&#x20b9; {total}</h2>\r\n            </div>\r\n            <div className='block'>\r\n                <div className='ele inc'>\r\n                    <h3>Income</h3>\r\n                    <h2>&#x20b9; {income}</h2>\r\n                </div>\r\n                <div className='ele exp'>\r\n                    <h3>Expense</h3>\r\n                    <h2>&#x20b9; {expense}</h2>\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Balance\r\n","import React from \"react\";\r\nimport \"./History.css\";\r\n\r\nfunction History({ id, text, amount, removeHistory, dclass, date }) {\r\n  return (\r\n    \r\n      <li key={id} className={dclass} >\r\n        {text} <span> &#x20b9; {amount}</span> <span>{date}</span> <button title='Delete' className='btn' onClick={removeHistory}>X</button>\r\n      </li>\r\n    \r\n  );\r\n}\r\n\r\nexport default History;\r\n","import React from \"react\";\r\nimport History from \"./History\";\r\nimport './HistoryList.css'\r\n\r\nfunction HistoryList({ transaction, removeHistory, date }) {\r\n  return (\r\n    <div className='historylist'>\r\n      <h3>History</h3>\r\n      {\r\n      transaction.map((data) => {\r\n        if(data.amount>0){\r\n            var dclass = 'plus'\r\n        }\r\n        else{\r\n            dclass = 'minus'\r\n        }\r\n        return <History date= {date} dclass={dclass}  removeHistory={() => removeHistory(data.id)} id={data.id} text={data.text} amount={data.amount} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HistoryList;\r\n","import React from \"react\";\r\nimport \"./Transaction.css\";\r\n\r\nfunction Transaction({ onSubmit, onAmountChange, onTextChange}) {\r\n  return (\r\n    <div className=\"trans\">\r\n      <h3>Add New Transaction</h3>\r\n      <p>Text</p>\r\n      <input onChange={onTextChange} placeholder=\"Enter the text\"></input>\r\n      <p>Amount</p>\r\n      <input onChange={onAmountChange} placeholder=\"Enter the amount\"></input>\r\n      <button type='submit' onClick={onSubmit}>Submit</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Transaction;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Balance from \"./Balance\";\nimport HistoryList from \"./HistoryList\";\nimport Transaction from \"./Transaction\";\n\n\n\nlet total, income, expense;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    // setting state for text amount historyitems\n    this.state = {\n      text: \"\",\n      amount: \"\",\n      historyItem: [],\n    };\n    \n  }\n  componentWillMount() {\n    localStorage.getItem('history') && this.setState({\n      historyItem:JSON.parse(localStorage.getItem('history'))\n    })\n  }\n  \n  componentWillUpdate(nextProps, nextState) {\n    localStorage.setItem('history',JSON.stringify(nextState.historyItem))\n  }\n  \n  \n  onTextChange = (text) => {\n    this.setState({\n      text: text.target.value,\n    });\n  };\n\n  onAmountChange = (amount) => {\n    this.setState({\n      amount: amount.target.value,\n    });\n    \n  };\n\n  generateID = () => {\n    return Math.floor(Math.random() * 1000000)\n  }\n\n  // to add new transaction on pressing submit button\n  onSubmit = () => {\n  \n    if (this.state.amount === \"\" || this.state.text === \"\") {\n      alert(\"Please enter text and amount\");\n    } \n    else {\n      this.setState({\n        historyItem: [\n          ...this.state.historyItem,\n          { id: this.generateID(), text: this.state.text, amount: this.state.amount },\n        ],\n      })\n      \n      \n    \n    }\n\n    \n  };\n  // deleting entry in the history by clicking on the X button\n  removeHistory = (id) => {\n    this.setState({\n      historyItem: this.state.historyItem.filter((li) => li.id !== id),\n    });\n  };\n  //calculation of balance, income, expense\n\n  calculate = () => {\n    const amounts = this.state.historyItem.map((value) => value.amount);\n\n    total = amounts.reduce((acc, am) => (acc += parseInt(am)), 0);\n\n    income = amounts\n      .filter((item) => item > 0)\n      .reduce((acc, item) => (acc += parseInt(item)), 0);\n\n    expense =\n      amounts\n        .filter((item) => item < 0)\n        .reduce((acc, item) => (acc += parseInt(item)), 0) * -1;\n  };\n\n  render() {\n    var today = new Date();\n    var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()\n    \n    this.calculate()\n    return (\n      <div className='container'>\n        <div className='bal'>\n          <Balance total={total} income={income} expense={expense} />\n          \n\n          <Transaction\n            onSubmit={this.onSubmit}\n            onAmountChange={this.onAmountChange}\n            onTextChange={this.onTextChange}\n          />\n        </div>\n        \n        <div className='his'>\n        <ul>\n          <HistoryList\n            transaction={this.state.historyItem}\n            removeHistory={this.removeHistory}\n            date={date}\n          />\n        </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}